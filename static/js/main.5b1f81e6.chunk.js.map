{"version":3,"sources":["model/CategoryModel.jsx","components/AddForm.jsx","components/CategorysList.jsx","components/DetailList.jsx","App.js","serviceWorker.js","index.js"],"names":["CategoryModel","id","category","sum","this","AddForm","currentCategory","handleAddDetails","handleAdd","useState","form","setForm","useEffect","handleChange","evt","target","name","value","prevForm","className","onSubmit","preventDefault","categorys","shortid","generate","htmlFor","type","onChange","required","step","CategorysList","allCategorys","map","allCategory","key","DetailList","details","detail","App","setDetails","currentDetail","prevDetails","reduce","accumulator","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5b1f81e6.chunk.js","sourcesContent":["export default class CategoryModel {\n  constructor(id, category, sum) {\n    this.id = id;\n    this.category = category;\n    this.sum = sum;\n  }\n}\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport CategoryModel from \"../model/CategoryModel\";\nimport shortid from \"shortid\";\n\nconst AddForm = ({ currentCategory, handleAdd, handleAddDetails }) => {\n  const [form, setForm] = useState({ category: \"\", sum: \"\" });\n\n  useEffect(() => {\n    if (currentCategory) {\n      setForm({ category: currentCategory.category, sum: currentCategory.sum });\n    }\n  }, [currentCategory]);\n\n  const handleChange = (evt) => {\n    const { name, value } = evt.target;\n    setForm((prevForm) => ({ ...prevForm, [name]: value }));\n  };\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    const categorys = new CategoryModel(\n      shortid.generate(),\n      form.category,\n      form.sum\n    );\n    \n    handleAddDetails(categorys);\n\n    setForm({ category: \"\", sum: \"\" });\n  };\n\n  return (\n    <form className=\"ui form\" onSubmit={handleSubmit}>\n      <div className=\"two fields\">\n        <div className=\"field\">\n          <label htmlFor=\"category\">Категория</label>\n          <div className=\"ui input left icon\">\n            <input\n              type=\"text\"\n              id=\"category\"\n              name=\"category\"\n              value={form.category}\n              onChange={handleChange}\n              required\n            />\n          </div>\n        </div>\n        <div className=\"field\">\n          <label htmlFor=\"sum\">Сумма</label>\n          <input\n            type=\"number\"\n            step=\"any\"\n            name=\"sum\"\n            id=\"sum\"\n            value={form.sum}\n            onChange={handleChange}\n            required\n          />\n        </div>\n      </div>\n      <button className=\"ui green button\" type=\"submit\">\n        Добавить\n      </button>\n    </form>\n  );\n};\n\nAddForm.propTypes = {\n  setCategorys: PropTypes.func.isRequired,\n};\n\nexport default AddForm;\n","import React from \"react\";\n\nconst CategorysList = ({ allCategorys}) => {\n  return (\n    <table className=\"ui basic table\">\n      <thead>\n        <tr>\n          <th className=\"ui basic table\">Суммарно по категориям</th>\n          <th>Сумма</th>\n        </tr>\n      </thead>\n      <tbody>\n        {allCategorys.map((allCategory) => (\n          <tr key={allCategory.id}>\n            <td>{allCategory.category}</td>\n            <td>{allCategory.sum}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default CategorysList;\n","import React from \"react\";\n\nconst DetailList = ({ details }) => {\n  return (\n    <table className=\"ui basic table\">\n      <thead>\n        <tr>\n          <th className=\"ui basic table\">Детализация</th>\n          <th>Сумма</th>\n        </tr>\n      </thead>\n      <tbody>\n        {details.map((detail) => (\n          <tr key={detail.id}>\n            <td>{detail.category}</td>\n            <td>{detail.sum}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default DetailList;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport AddForm from \"./components/AddForm\";\nimport CategorysList from \"./components/CategorysList\";\nimport DetailList from \"./components/DetailList\";\n\nfunction App() {\n  const [details, allCategorys, setDetails] = useState([]);\n  const [currentDetail] = useState({\n    category: \"\",\n    sum: \"\",\n  });\n\n  const handleAddDetails = (details, allCategorys) => {\n    setDetails((prevDetails) => {\n      if (prevDetails && prevDetails.category === details.category) {\n        allCategorys.reduce(function (accumulator, details) {\n          return accumulator + details;\n        }, 0);\n      }\n\n      return [...allCategorys, details];\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"ui raised very padded text container segment\">\n        <AddForm\n          setDetails={setDetails}\n          handleAddDetails={handleAddDetails}\n          currentDetail={currentDetail}\n        />\n        <CategorysList allCategorys={allCategorys} />\n        <DetailList details={details} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}